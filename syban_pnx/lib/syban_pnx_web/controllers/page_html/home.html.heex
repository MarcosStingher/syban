<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Dashboards de Monitoramento</title>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
        <style>
            /* Seu CSS aqui */
            body {
                display: flex;
                font-family: Arial, sans-serif;
                margin: 0;
            }
    
            .sidebar {
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                width: 220px;
                background-color: #34495e;
                color: #ecf0f1;
                padding: 20px;
                box-sizing: border-box;
                height: 100vh;
                position: fixed;
                top: 0;
                left: 0;
                overflow: hidden;
                transition: width 0.3s;
            }
    
            .sidebar:hover {
                width: 250px;
            }
    
            .sidebar h2 {
                font-size: 1.5em;
                margin-bottom: 20px;
                text-align: center;
                border-bottom: 2px solid #ecf0f1;
                padding-bottom: 10px;
            }
    
            .sidebar a {
                color: #ecf0f1;
                text-decoration: none;
                display: block;
                padding: 15px 20px;
                margin: 10px 0;
                border-radius: 4px;
                transition: background-color 0.3s, padding-left 0.3s;
            }
    
            .sidebar a:hover {
                background-color: #2c3e50;
                padding-left: 30px;
            }
    
            .main-content {
                margin-left: 220px;
                /* Ajuste conforme a largura da sidebar */
                padding: 20px;
                box-sizing: border-box;
                width: calc(100% - 220px);
                transition: margin-left 0.3s, width 0.3s;
            }
    
            .sidebar:hover ~ .main-content {
                margin-left: 250px;
                /* Ajuste conforme a largura da sidebar */
                width: calc(100% - 250px);
            }
    
            .chart-container {
                display: flex;
                flex-wrap: wrap;
                justify-content: space-around;
                align-items: center;
            }
    
            .chart-box {
                width: 40%;
                /* Ajuste a largura dos gráficos */
                margin-bottom: 20px;
            }
    
            .chart-box.doughnut-chart {
                width: 25%;
                /* Ajuste específico para o gráfico de pizza */
            }
    
            canvas {
                width: 100% !important;
                height: auto !important;
            }

            .sidebar .links {
            flex-grow: 1;
            }

            .user-links {
            display: flex;
            gap: 5px; /* Espaçamento entre os links */
           }
        </style>
    </head>
    
<body>
    <div class="sidebar">
        <div class="links">
            <h2>Syban</h2>
            <a href="#">Dashboard</a>
            <a href="/dispositivo">Dispositivo</a>
            <a href="/Relatorio">Relatório</a>
            <a href="#">Suporte</a>
            <h2></h2>
        </div>
        <ul>
            <%= if @current_user do %>
                <li class="leading-6">
                    <%= @current_user.email %>
                </li>
                <div class="user-links">
                    <li>
                        <.link
                            href={~p"/users/settings"}
                            class="text-[0.7rem] leading-6 text-zinc-900 font-semibold hover:text-zinc-400"
                        >
                            Configurações
                        </.link>
                    </li>
                    <li>
                        <.link
                            href={~p"/users/log_out"}
                            method="delete"
                            class="text-[0.7rem] leading-6 text-zinc-900 font-semibold hover:text-zinc-400"
                        >
                            Sair
                        </.link>
                    </li>
                </div>
            <% else %>
                <li>
                    <.link
                        href={~p"/users/register"}
                        class="text-[0.8125rem] leading-6 text-zinc-900 font-semibold hover:text-zinc-700"
                    >
                        Register
                    </.link>
                </li>
                <li>
                    <.link
                        href={~p"/users/log_in"}
                        class="text-[0.8125rem] leading-6 text-zinc-900 font-semibold hover:text-zinc-700"
                    >
                        Log in
                    </.link>
                </li>
            <% end %>
        </ul>
    </div>


    <div class="main-content">
        <div class="chart-container">
            <div class="chart-box">
                <canvas id="ramUsageChart"></canvas>
            </div>
            <div class="chart-box doughnut-chart">
                <canvas id="diskUsageChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="cpuUsageChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="gpuUsageChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="gpuMemoryChart"></canvas>
            </div>
        </div>
    </div>
    
    <script>
        let ramUsageChart;
        let diskUsageChart;
        let cpuUsageChart;
        let gpuUsageChart;
        let gpuMemoryChart;
    
        async function fetchData() {
            const response = await fetch("http://localhost:4000/api/monitoramento");
            const result = await response.json();
            return result.data;
        }
    
        function processData(data) {
            const labels = data.map(item => new Date(item.datahora).toLocaleString());
            const memoryUsage = data.map(item => parseFloat(item.memPercentual));
            const diskTotal = data.map(item => parseFloat(item.discoTotal));
            const diskUsed = data.map(item => parseFloat(item.discoUsado));
            const cpuUsage = data.map(item => parseFloat(item.cpuPercentual));
            const memRamUsada = data.map(item => parseFloat(item.memRamUsada));
            const memRamTotal = data.map(item => parseFloat(item.memRamTotal));
            const gpuUsada = data.map(item => parseFloat(item.gpuUsada));
            const gpuTemp = data.map(item => parseFloat(item.gpuTemp));
            const gpuMemUsada = data.map(item => parseFloat(item.gpuMemUsada));
            const gpuMemTot = data.map(item => parseFloat(item.gpuMemTot));
            const gpuMemLivre = data.map(item => parseFloat(item.gpuMemLivre));
    
            return { labels, memoryUsage, diskTotal, diskUsed, cpuUsage, memRamUsada, memRamTotal, gpuUsada, gpuTemp, gpuMemUsada, gpuMemTot, gpuMemLivre };
        }
    
        async function renderCharts() {
            const data = await fetchData();
            const { labels, memoryUsage, diskTotal, diskUsed, cpuUsage, memRamUsada, memRamTotal, gpuUsada, gpuTemp, gpuMemUsada, gpuMemTot, gpuMemLivre } = processData(data);
    
            // Configuração do Gráfico de Linha para Uso de Memória RAM com mudança de cor condicional
            const ramUsageData = {
                labels: labels,
                datasets: [{
                    label: 'Uso de Memória RAM (%)',
                    data: memoryUsage,
                    fill: false,
                    borderColor: context => {
                        let value = context.dataset.data[context.dataIndex];
                        return value >= 85 ? 'rgb(255, 99, 132)' : 'rgb(75, 192, 192)';
                    },
                    backgroundColor: context => {
                        let value = context.dataset.data[context.dataIndex];
                        return value >= 85 ? 'rgba(255, 99, 132, 0.2)' : 'rgba(75, 192, 192, 0.2)';
                    },
                    tension: 0.1
                }]
            };
    
            const ramUsageConfig = {
                type: 'line',
                data: ramUsageData,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };
    
            // Configuração do Gráfico de Pizza para Uso de Disco (usando apenas o último conjunto de dados)
            const lastDiskUsed = diskUsed[diskUsed.length - 1];
            const lastDiskTotal = diskTotal[diskTotal.length - 1];
            const diskUsageData = {
                labels: ['Disco Usado', 'Disco Livre'],
                datasets: [{
                    label: 'Uso de Disco (GB)',
                    data: [lastDiskUsed, lastDiskTotal - lastDiskUsed],
                    backgroundColor: lastDiskUsed / lastDiskTotal >= 0.85 ? ['rgba(255, 99, 132, 0.5)', 'rgba(100, 206, 86, 0.5)'] : ['rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)'],
                    borderColor: lastDiskUsed / lastDiskTotal >= 0.85 ? ['rgba(255, 100, 100, 1)', 'rgba(100, 206, 86, 1)'] : ['rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],
                    borderWidth: 1
                    
                }]
            };
    
            const diskUsageConfig = {
                type: 'doughnut',
                data: diskUsageData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.raw !== null) {
                                        label += context.raw + ' GB';
                                    }
                                    return label;
                                }
                            }
                        },
                        datalabels: {
                            formatter: (value, context) => {
                                let sum = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                let percentage = (value * 100 / sum).toFixed(2) + '%';
                                return percentage;
                            },
                            color: '#36A2EB',
                            font: {
                                weight: 'bold',
                                size: 16,
                            }
                        }
                    }
                }
            };
    
            // Configuração do Gráfico de Barras para Uso da CPU
            const cpuUsageData = {
                labels: labels,
                datasets: [{
                    label: 'Uso de CPU (%)',
                    data: cpuUsage,
                    backgroundColor: cpuUsage.map(value => value > 90 ? 'rgba(255, 99, 132, 0.2)' : 'rgba(75, 192, 192, 0.2)'),
                    borderColor: cpuUsage.map(value => value > 90 ? 'rgba(255, 99, 132, 1)' : 'rgba(75, 192, 192, 1)'),
                    borderWidth: 1
                }]
            };
    
            const cpuUsageConfig = {
                type: 'bar',
                data: cpuUsageData,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };
    
            // Configuração do Gráfico de Linha para Uso da GPU e Temperatura
            const gpuUsageData = {
                labels: labels,
                datasets: [
                    {
                        label: 'Uso de GPU (%)',
                        data: gpuUsada,
                        fill: false,
                        borderColor: 'rgb(54, 162, 235)',
                        tension: 0.1
                    },
                    {
                        label: 'Temperatura da GPU (°C)',
                        data: gpuTemp,
                        fill: false,
                        borderColor: 'rgb(255, 159, 64)',
                        tension: 0.1
                    }
                ]
            };
    
            const gpuUsageConfig = {
                type: 'line',
                data: gpuUsageData,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };
    
            // Configuração do Gráfico de Linha para Uso da Memória da GPU
            const gpuMemoryData = {
                labels: labels,
                datasets: [
                    {
                        label: 'Memória da GPU Usada (GB)',
                        data: gpuMemUsada,
                        fill: false,
                        borderColor: 'rgb(153, 102, 255)',
                        tension: 0.1
                    },
                    {
                        label: 'Memória Total da GPU (GB)',
                        data: gpuMemTot,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    },
                    {
                        label: 'Memória Livre da GPU (GB)',
                        data: gpuMemLivre,
                        fill: false,
                        borderColor: 'rgb(255, 205, 86)',
                        tension: 0.1
                    }
                ]
            };
    
            const gpuMemoryConfig = {
                type: 'line',
                data: gpuMemoryData,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };
    
            // Se os gráficos já existirem, atualiza os dados; caso contrário, cria os gráficos
            if (ramUsageChart && diskUsageChart && cpuUsageChart && gpuUsageChart && gpuMemoryChart) {
                ramUsageChart.data = ramUsageData;
                ramUsageChart.update();
                diskUsageChart.data = diskUsageData;
                diskUsageChart.update();
                cpuUsageChart.data = cpuUsageData;
                cpuUsageChart.update();
                gpuUsageChart.data = gpuUsageData;
                gpuUsageChart.update();
                gpuMemoryChart.data = gpuMemoryData;
                gpuMemoryChart.update();
            } else {
                const ramCtx = document.getElementById('ramUsageChart').getContext('2d');
                ramUsageChart = new Chart(ramCtx, ramUsageConfig);
    
                const diskCtx = document.getElementById('diskUsageChart').getContext('2d');
                diskUsageChart = new Chart(diskCtx, diskUsageConfig);
    
                const cpuCtx = document.getElementById('cpuUsageChart').getContext('2d');
                cpuUsageChart = new Chart(cpuCtx, cpuUsageConfig);
    
                const gpuCtx = document.getElementById('gpuUsageChart').getContext('2d');
                gpuUsageChart = new Chart(gpuCtx, gpuUsageConfig);
    
                const gpuMemoryCtx = document.getElementById('gpuMemoryChart').getContext('2d');
                gpuMemoryChart = new Chart(gpuMemoryCtx, gpuMemoryConfig);
            }
        }
    
        function startTimer() {
            setInterval(renderCharts, 60000); // 6000ms = 6 segundos
        }
    
        window.onload = function() {
            renderCharts(); // Renderiza inicialmente os gráficos
            startTimer(); // Inicia o timer para atualizar os gráficos a cada 6 segundos
        };
    </script>
    
    
</body>
</html>
